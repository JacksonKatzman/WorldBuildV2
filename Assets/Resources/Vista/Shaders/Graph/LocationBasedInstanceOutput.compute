#pragma kernel Main
#pragma multi_compile_local _ HAS_DENSITY_MAP
#pragma multi_compile_local _ HAS_VERTICAL_SCALE_MAP
#pragma multi_compile_local _ HAS_HORIZONTAL_SCALE_MAP
#pragma multi_compile_local _ HAS_ROTATION_MAP

#pragma multi_compile_local _ HAS_LOCATIONS_MAP

#include "../Includes/CommonDataTypes.hlsl"
#include "../Includes/Math.hlsl"
#include "../Includes/Sampling.hlsl"

RWStructuredBuffer<InstanceSample> _InstanceSamples;

StructuredBuffer<PositionSample> _Positions;

float _DensityMultiplier;
#if HAS_DENSITY_MAP
	Texture2D<float> _DensityMap;
#endif

float _VerticalScaleMultiplier;
#if HAS_VERTICAL_SCALE_MAP
	Texture2D<float> _VerticalScaleMap;
#endif

float _HorizontalScaleMultiplier;
#if HAS_HORIZONTAL_SCALE_MAP
	Texture2D<float> _HorizontalScaleMap;
#endif

float _MinRotation;
float _MaxRotation;
float _RotationMultiplier;
#if HAS_ROTATION_MAP
	Texture2D<float> _RotationMap;
#endif

#if HAS_LOCATIONS_MAP
	Texture2D<float> _LocationsMap;
#endif

float4 _Seed;
int _BaseIndex;

[numthreads(8, 1, 1)]
void Main(uint3 id: SV_DispatchThreadID)
{
	int i = id.x + _BaseIndex;
	PositionSample pos = _Positions[i];

	InstanceSample t = (InstanceSample)0;
	float fDensity = _DensityMultiplier;
	#if HAS_DENSITY_MAP
		fDensity *= _DensityMap.SampleLevel(_SamplerLinearClamp, pos.position.xz, 0);
	#endif

	float fLocations = 1;
	#if HAS_LOCATIONS_MAP
		fLocations *= _LocationsMap.SampleLevel(_SamplerLinearClamp, pos.position.xz, 0);
	#endif

	float a = randomValue(id.x * 0.01 * _Seed.x, id.x * 0.01 * _Seed.y);
	float f = randomValue(a);
	int isValid = (f < fDensity && f < fLocations);
	t.isValid = isValid * pos.isValid;
	t.position = pos.position;

	float fHeightScale = _VerticalScaleMultiplier;
	#if HAS_VERTICAL_SCALE_MAP
		fHeightScale *= _VerticalScaleMap.SampleLevel(_SamplerLinearClamp, pos.position.xz, 0);
	#endif
	t.verticalScale = fHeightScale;

	float fWidthScale = _HorizontalScaleMultiplier;
	#if HAS_HORIZONTAL_SCALE_MAP
		fWidthScale *= _HorizontalScaleMap.SampleLevel(_SamplerLinearClamp, pos.position.xz, 0);
	#endif
	t.horizontalScale = fHeightScale;

	float fRotation = _RotationMultiplier;
	#if HAS_ROTATION_MAP
		fRotation *= _RotationMap.SampleLevel(_SamplerLinearClamp, pos.position.xz, 0);
	#endif
	t.rotationY = lerp(_MinRotation, _MaxRotation, fRotation);

	_InstanceSamples[i] = t;
}
